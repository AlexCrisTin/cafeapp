========================================
BÁO CÁO PHÂN TÍCH HỆ THỐNG CAFE APP
========================================

I. TỔNG QUAN HỆ THỐNG
=====================

Hệ thống Cafe App là một ứng dụng Flutter quản lý quán cà phê với 3 loại người dùng:
- Admin: Quản lý toàn bộ hệ thống
- User: Khách hàng đã đăng ký
- Guest: Khách hàng chưa đăng ký

II. KIẾN TRÚC HỆ THỐNG
====================

1. Cấu trúc thư mục chính:
   - lib/
     - database/ (Quản lý dữ liệu)
     - login/ (Xác thực người dùng)
     - page cafe/ (Giao diện chính)
     - users/ (Phân quyền người dùng)

2. Kiến trúc phân tầng:
   - Presentation Layer: UI Components
   - Business Logic Layer: Services
   - Data Layer: Local Storage (JSON files)

III. CÁC CHỨC NĂNG CHÍNH VÀ CODE ĐẠI DIỆN
========================================

1. QUẢN LÝ XÁC THỰC NGƯỜI DÙNG
=============================

Chức năng: Đăng nhập, đăng ký, phân quyền người dùng
File: lib/database/auth/auth_service.dart

Code đại diện:
```dart
class AuthService {
  static final AuthService instance = AuthService._internal();
  
  bool _isLoggedIn = false;
  bool _isGuest = false;
  AuthUser? _currentUser;
  
  bool loginWithCredentials(String email, String password) {
    final entry = _users[email.trim().toLowerCase()];
    if (entry == null) return false;
    if (entry['password'] != password) return false;
    
    _currentUser = AuthUser(email: email.trim().toLowerCase(), 
                           role: entry['role'] as UserRole);
    _isLoggedIn = true;
    _isGuest = false;
    return true;
  }
  
  Future<bool> registerUser(String email, String password) async {
    final cleanEmail = email.trim().toLowerCase();
    if (_users.containsKey(cleanEmail)) return false;
    
    _users[cleanEmail] = {
      'password': password,
      'role': UserRole.user,
    };
    await _saveToFile();
    return true;
  }
}
```

2. QUẢN LÝ SẢN PHẨM
===================

Chức năng: Thêm, sửa, xóa, tìm kiếm sản phẩm
File: lib/database/data/product_data.dart

Code đại diện:
```dart
class Product {
  final String id;
  final String name;
  final String description;
  final double price;
  final String imagePath;
  final String category;
  final bool hasSize;
  final Map<String, double>? sizePrices;
  
  double getPriceForSize(String size) {
    if (!hasSize || sizePrices == null) return price;
    return sizePrices![size] ?? price;
  }
}

class ProductData {
  static List<Product> products = [];
  
  static Future<void> addProduct(Product product) async {
    products.add(product);
    await _saveToFile();
  }
  
  static Future<void> updateProduct(Product product) async {
    final index = products.indexWhere((p) => p.id == product.id);
    if (index >= 0) {
      products[index] = product;
      await _saveToFile();
    }
  }
  
  static Future<void> deleteProduct(String productId) async {
    products.removeWhere((p) => p.id == productId);
    await _saveToFile();
  }
}
```

3. QUẢN LÝ GIỎ HÀNG
===================

Chức năng: Thêm, xóa, cập nhật số lượng sản phẩm trong giỏ hàng
File: lib/database/data/cart_service.dart

Code đại diện:
```dart
class CartItem {
  final Product product;
  int quantity;
  final String? selectedSize;
  
  double get totalPrice {
    if (selectedSize != null && product.hasSize) {
      return product.getPriceForSize(selectedSize!) * quantity;
    }
    return product.price * quantity;
  }
}

class CartService {
  static final Map<String, List<CartItem>> _userCarts = {};
  
  static Future<void> addToCart(Product product, {int quantity = 1, String? selectedSize}) async {
    final currentUserId = _getCurrentUserId();
    if (!_userCarts.containsKey(currentUserId)) {
      _userCarts[currentUserId] = [];
    }
    
    final userItems = _userCarts[currentUserId]!;
    final index = userItems.indexWhere((it) => 
      it.product.id == product.id && it.selectedSize == selectedSize);
    if (index >= 0) {
      userItems[index].quantity += quantity;
    } else {
      userItems.add(CartItem(product: product, quantity: quantity, selectedSize: selectedSize));
    }
    await _saveToFile();
  }
  
  static double get totalPrice {
    final currentUserId = _getCurrentUserId();
    final userItems = _userCarts[currentUserId] ?? [];
    return userItems.fold(0.0, (sum, it) => sum + it.totalPrice);
  }
}
```

4. QUẢN LÝ ĐƠN HÀNG
==================

Chức năng: Tạo, cập nhật trạng thái, xem lịch sử đơn hàng
File: lib/database/data/orders_service.dart

Code đại diện:
```dart
enum OrderStatus { pending, confirmed, completed }

class Order {
  final String id;
  final String? userId;
  final String customerName;
  final String phone;
  final String address;
  final String paymentMethod;
  final List<OrderItem> items;
  OrderStatus status;
  
  double get totalPrice => items.fold(0.0, (sum, it) => sum + it.totalPrice);
}

class OrdersService {
  static final List<Order> _orders = [];
  
  static Future<Order> createOrder({
    required String name,
    required String phone,
    required String address,
    required String payment,
    required List<CartItem> cartItems,
  }) async {
    String? userId;
    final auth = AuthService.instance;
    if (auth.isLoggedIn && auth.currentUser != null) {
      userId = auth.currentUser!.email;
    }
    
    final order = Order(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      userId: userId,
      customerName: name,
      phone: phone,
      address: address,
      paymentMethod: payment,
      items: cartItems.map((ci) => OrderItem(
        product: ci.product, 
        quantity: ci.quantity, 
        selectedSize: ci.selectedSize
      )).toList(),
    );
    _orders.add(order);
    await _saveToFile();
    return order;
  }
  
  static Future<void> updateOrderStatus(String orderId, OrderStatus newStatus) async {
    final index = _orders.indexWhere((o) => o.id == orderId);
    if (index >= 0) {
      _orders[index].status = newStatus;
      await _saveToFile();
    }
  }
}
```

5. GIAO DIỆN NGƯỜI DÙNG
======================

Chức năng: Hiển thị sản phẩm, tìm kiếm, danh mục
File: lib/page cafe/menu/menu_page.dart

Code đại diện:
```dart
class MenuPage extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: [
          // Danh mục sản phẩm
          Container(
            child: Column(
              children: [
                Text('Danh mục', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                Row(
                  children: [
                    Expanded(child: _buildCategoryButton(
                      icon: Icons.coffee,
                      title: 'Cafe',
                      color: Color(0xFF8D6E63),
                      onTap: () => _navigateToCategory('Cafe'),
                    )),
                    // Các danh mục khác...
                  ],
                ),
              ],
            ),
          ),
          // Hiển thị tất cả sản phẩm
          Container(
            child: Column(
              children: [
                Text('Tất cả sản phẩm', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                ...allProducts.map((product) => item1(productId: product.id)).toList(),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
```

6. GIAO DIỆN ADMIN
=================

Chức năng: Quản lý sản phẩm, đơn hàng, người dùng
File: lib/users/admin/management/admin_products_page.dart

Code đại diện:
```dart
class AdminProductsPage extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _openProductForm(context),
        backgroundColor: const Color(0xFFDC586D),
        icon: const Icon(Icons.add),
        label: const Text('Thêm sản phẩm'),
      ),
      body: Column(
        children: [
          // Tìm kiếm sản phẩm
          TextField(
            controller: _searchController,
            onChanged: (_) => setState(() {}),
            decoration: InputDecoration(
              hintText: 'Tìm theo tên, danh mục, mô tả...',
              prefixIcon: const Icon(Icons.search),
            ),
          ),
          // Bảng sản phẩm
          Expanded(
            child: _buildProductsTable(context, filtered),
          ),
        ],
      ),
    );
  }
  
  Widget _buildProductsTable(BuildContext context, List<Product> products) {
    return ListView.builder(
      itemCount: products.length,
      itemBuilder: (context, index) {
        final p = products[index];
        return Row(
          children: [
            Expanded(flex: 2, child: Text(p.name)),
            Expanded(child: Text(p.price.toStringAsFixed(0))),
            Expanded(child: Text(p.category)),
            Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.edit, color: Colors.blue),
                  onPressed: () => _openProductForm(context, product: p),
                ),
                IconButton(
                  icon: const Icon(Icons.delete, color: Colors.red),
                  onPressed: () async {
                    await ProductData.deleteProduct(p.id);
                    setState(() {});
                  },
                ),
              ],
            ),
          ],
        );
      },
    );
  }
}
```

7. THANH TOÁN VÀ CHECKOUT
=========================

Chức năng: Xử lý thông tin thanh toán, tạo đơn hàng
File: lib/page cafe/home/checkout_page.dart

Code đại diện:
```dart
class CheckoutPage extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          // Form thông tin khách hàng
          TextField(
            controller: _nameController,
            decoration: InputDecoration(hintText: 'Họ và tên'),
          ),
          TextField(
            controller: _phoneController,
            decoration: InputDecoration(hintText: 'Số điện thoại'),
          ),
          TextField(
            controller: _addressController,
            decoration: InputDecoration(hintText: 'Địa chỉ'),
          ),
          // Phương thức thanh toán
          Row(
            children: [
              Radio<String>(value: 'card', groupValue: _payment, onChanged: (v) => setState(() => _payment = v!)),
              Radio<String>(value: 'cash', groupValue: _payment, onChanged: (v) => setState(() => _payment = v!)),
            ],
          ),
          // Nút thanh toán
          ElevatedButton(
            onPressed: () async {
              // Validation
              if (_nameController.text.trim().isEmpty || 
                  _phoneController.text.trim().isEmpty || 
                  _addressController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Vui lòng điền đủ thông tin')),
                );
                return;
              }
              
              // Tạo đơn hàng
              await OrdersService.createOrder(
                name: _nameController.text.trim(),
                phone: _phoneController.text.trim(),
                address: _addressController.text.trim(),
                payment: _payment,
                cartItems: CartService.items,
              );
              await CartService.clear();
              Navigator.of(context).pushAndRemoveUntil(
                MaterialPageRoute(builder: (_) => NavigationHelper.getHomePage()),
                (route) => false,
              );
            },
            child: Text('Mua'),
          ),
        ],
      ),
    );
  }
}
```

IV. ĐIỀU HƯỚNG VÀ PHÂN QUYỀN
============================

Chức năng: Điều hướng người dùng theo vai trò
File: lib/database/auth/navigation_helper.dart

Code đại diện:
```dart
class NavigationHelper {
  static Widget getHomePage() {
    final AuthService auth = AuthService.instance;
    
    if (!auth.isLoggedIn && !auth.isGuest) {
      return Begin(); // Trang đăng nhập
    }
    
    if (auth.isLoggedIn && auth.currentUser != null) {
      switch (auth.currentUser!.role) {
        case UserRole.admin:
          return AdminMain();
        case UserRole.user:
          return UserMain();
        case UserRole.guest:
          return GuestMain();
      }
    }
    
    if (auth.isGuest) {
      return GuestMain();
    }
    
    return Begin();
  }
}
```

V. LƯU TRỮ DỮ LIỆU
==================

Chức năng: Lưu trữ dữ liệu local bằng JSON files
File: lib/database/data/product_data.dart (phần _saveToFile)

Code đại diện:
```dart
static Future<void> _saveToFile() async {
  try {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/$_fileName');
    final jsonData = products.map((product) => product.toJson()).toList();
    await file.writeAsString(jsonEncode(jsonData));
  } catch (e) {
    print('Lỗi khi lưu sản phẩm: $e');
  }
}

static Future<void> loadFromFile() async {
  try {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/$_fileName');
    
    if (await file.exists()) {
      final jsonString = await file.readAsString();
      final List<dynamic> jsonData = jsonDecode(jsonString);
      
      products.clear();
      for (var productJson in jsonData) {
        products.add(Product.fromJson(productJson));
      }
    } else {
      products = List<Product>.from(_defaultProducts);
      await _saveToFile();
    }
  } catch (e) {
    print('Lỗi khi đọc sản phẩm: $e');
    products = List<Product>.from(_defaultProducts);
  }
}
```

VI. ĐÁNH GIÁ HỆ THỐNG
=====================

Ưu điểm:
- Kiến trúc rõ ràng, tách biệt các layer
- Hỗ trợ đa người dùng với phân quyền
- Giao diện thân thiện, dễ sử dụng
- Quản lý dữ liệu local hiệu quả
- Code được tổ chức tốt, dễ maintain

Hạn chế:
- Chỉ lưu trữ local, không có đồng bộ cloud
- Thiếu tính năng báo cáo thống kê
- Chưa có tính năng đánh giá sản phẩm
- Thiếu tính năng khuyến mãi/voucher

VII. KẾT LUẬN
=============

Hệ thống Cafe App được thiết kế tốt với kiến trúc MVC rõ ràng, hỗ trợ đầy đủ các chức năng cơ bản của một ứng dụng quản lý quán cà phê. Code được tổ chức khoa học, dễ đọc và maintain. Hệ thống phù hợp cho các quán cà phê nhỏ đến trung bình với nhu cầu quản lý đơn giản.

========================================
Tóm tắt những gì đã phân tích:
Các chức năng chính đã xác định:
Quản lý xác thực người dùng - Đăng nhập, đăng ký, phân quyền (Admin/User/Guest)
Quản lý sản phẩm - CRUD operations cho sản phẩm, hỗ trợ size và giá khác nhau
Quản lý giỏ hàng - Thêm/xóa/cập nhật sản phẩm, tính tổng tiền
Quản lý đơn hàng - Tạo đơn hàng, cập nhật trạng thái, lịch sử đơn hàng
Giao diện người dùng - Hiển thị menu, tìm kiếm, danh mục sản phẩm
Giao diện admin - Quản lý sản phẩm, đơn hàng, người dùng
Thanh toán - Xử lý thông tin khách hàng, phương thức thanh toán
Điều hướng - Phân quyền và điều hướng theo vai trò người dùng
Lưu trữ dữ liệu - Local storage bằng JSON files
Code đại diện đã trích xuất:
Mỗi chức năng đều có code mẫu quan trọng nhất
Bao gồm cả class definitions và method implementations
Có giải thích chi tiết về cách hoạt động
Đánh giá hệ thống:
Ưu điểm: Kiến trúc rõ ràng, phân quyền tốt, giao diện thân thiện
Hạn chế: Chỉ lưu trữ local, thiếu tính năng báo cáo, chưa có đánh giá sản phẩm

      Các component chính trong Android
Main Activity:
android/app/src/main/kotlin/com/example/cafeproject/MainActivity.kt (kế thừa FlutterActivity)
Manifest:
android/app/src/main/AndroidManifest.xml
Permissions: CAMERA, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
activity chính: .MainActivity, exported=true, launchMode=singleTop, theme @style/LaunchTheme
meta-data flutterEmbedding=2, NormalTheme
<queries> cho ACTION_PROCESS_TEXT
Plugins/thư viện Android hiện diện (theo build outputs): path_provider_android, shared_preferences_android, image_picker_android (chưa thấy dùng trực tiếp trong lib)
        Các thành phần giao diện được sử dụng trong app (Flutter UI)
Layout/khung:
Scaffold, AppBar, SafeArea, Container, Center, SizedBox, Card
Danh sách/scroll: ListView, ListView.separated, ListView.builder, PageView
Điều hướng/Bottom bar:
BottomNavigationBar, custom UserBottomNav (trong users/user/bottom_navigation/user_bottom_nav.dart)
Form và nhập liệu:
TextField, TextFormField (xuất hiện theo pattern tìm kiếm), DropdownButton, IconButton
Nút: ElevatedButton, ElevatedButton.icon
Ảnh/đồ họa:
Image.asset, Image.file (qua ImageHelper.buildImage)
Thông báo/hộp thoại:
SnackBar (qua ScaffoldMessenger), AlertDialog, showDialog
Một số trang/feature chính (điểm qua file):
Auth: login/begin.dart, login/login.dart, login/signup.dart
Người dùng: users/user/{user_main.dart, home, cart, orders, profile}
Khách: users/guest/{guest_main.dart, browse, cart}
Quản trị: users/admin/{admin_main.dart, dashboard, management/*}
Menu/Tìm kiếm/Trang chủ: page cafe/menu/*, page cafe/search/search_page.dart, page cafe/home/*, page cafe/profile/*
Thành phần database (data layer/persistence)
Sản phẩm:
database/data/product_data.dart
Lớp Product, kho ProductData
Lưu/đọc JSON file products_data.json qua path_provider tại Application Documents
Có dữ liệu mặc định seed nếu chưa có file
Giỏ hàng:
database/data/cart_service.dart
Lớp CartItem, service CartService quản lý giỏ theo user (map userId → list items)
Lưu/đọc JSON file cart_data.json
Tích hợp AuthService để xác định currentUserId (email | guest | anonymous)
Đơn hàng:
database/data/orders_service.dart
Lớp OrderItem, Order, service OrdersService
Lưu/đọc JSON file orders_data.json, các helper lọc theo trạng thái (pending/confirmed/completed) và theo user
Tạo đơn từ các CartItem
Model đơn hàng (in-memory phụ):
database/data/order_data.dart (một mô hình khác in-memory, không persist)
Xác thực/Người dùng:
database/auth/auth_service.dart
AuthService, AuthUser, UserRole (user|admin|guest)
In-memory map người dùng + persist vào JSON users_data.json; seed sẵn admin
API: đăng nhập, đăng ký, đổi vai trò, đổi mật khẩu, khách vãng lai
Hỗ trợ điều hướng theo quyền:
database/auth/navigation_helper.dart chọn trang Begin/AdminMain/UserMain/GuestMain theo trạng thái
database/auth/login_required.dart hiển thị AlertDialog yêu cầu đăng nhập khi cần
 
VIII. THÀNH PHẦN DATABASE (DATA LAYER)
======================================

1. Mục tiêu
-----------
- Cung cấp lớp trừu tượng quản lý dữ liệu cho toàn ứng dụng (sản phẩm, giỏ hàng, đơn hàng, người dùng) tách biệt với giao diện (UI) và điều hướng.
- Đảm bảo tính nhất quán dữ liệu, khả năng khôi phục trạng thái qua các lần mở ứng dụng, và mở đường cho việc mở rộng sang backend/cloud.

2. Công nghệ và nguyên tắc
--------------------------
- Lưu trữ cục bộ bằng JSON files tại Application Documents (sử dụng `path_provider`).
- Đọc/ghi file bằng `dart:io` (`File.readAsString`, `File.writeAsString`).
- Tuần tự hóa/giải tuần tự hóa bằng `dart:convert` (`jsonEncode`, `jsonDecode`).
- Phân lớp rõ ràng: Model (định nghĩa dữ liệu) và Service/Repository (nghiệp vụ + persist).

3. Cấu phần chính và vai trò
----------------------------
- Sản phẩm — `lib/database/data/product_data.dart`
  - Model `Product` (id, name, description, price, imagePath, category, hasSize, sizePrices).
  - Kho `ProductData` với CRUD: thêm, cập nhật, xóa, tải dữ liệu; phương thức `_saveToFile()` và `loadFromFile()`.
  - Lưu tại `products_data.json`, có seed dữ liệu mặc định khi chưa tồn tại file.
- Giỏ hàng — `lib/database/data/cart_service.dart`
  - Model `CartItem` (product, quantity, selectedSize) với thuộc tính tính giá `totalPrice` theo size.
  - Service `CartService` quản lý giỏ theo người dùng: ánh xạ `userId → List<CartItem>`; thao tác thêm/cập nhật/xóa; tổng tiền toàn giỏ.
  - Tích hợp `AuthService` để xác định `currentUserId` (email | guest | anonymous). Lưu tại `cart_data.json`.
- Đơn hàng — `lib/database/data/orders_service.dart`
  - `OrderItem`, `Order`, và `OrderStatus { pending, confirmed, completed }`.
  - `OrdersService` tạo đơn từ giỏ hàng, cập nhật trạng thái, lọc theo trạng thái/người dùng; persist qua `_saveToFile()`/`loadFromFile()` tại `orders_data.json`.
- Mô hình đơn hàng phụ (in-memory) — `lib/database/data/order_data.dart`
  - Phục vụ tính toán/tạm thời, không persist, hỗ trợ các màn hình/logic trung gian.
- Xác thực/Người dùng — `lib/database/auth/auth_service.dart`
  - `AuthService`, `AuthUser`, `UserRole (admin|user|guest)`; API đăng nhập, đăng ký, đổi vai trò/mật khẩu, chế độ khách.
  - Lưu trữ người dùng tại `users_data.json` (seed sẵn tài khoản admin); kết nối với các service khác qua trạng thái xác thực.
- Điều hướng theo quyền — `lib/database/auth/navigation_helper.dart`, `lib/database/auth/login_required.dart`
  - Chọn trang Begin/AdminMain/UserMain/GuestMain dựa trên trạng thái đăng nhập/quyền; hiển thị `AlertDialog` yêu cầu đăng nhập khi cần.

4. Luồng dữ liệu điển hình
--------------------------
- Người dùng thao tác trên UI (ví dụ `CheckoutPage`) → đọc dữ liệu giỏ qua `CartService` → gọi `OrdersService.createOrder(...)`.
- `OrdersService` lấy `userId` từ `AuthService`, chuyển đổi `CartItem` → `OrderItem`, tạo `Order`, ghi `orders_data.json` → yêu cầu `CartService.clear()` để cập nhật `cart_data.json`.
- Khi khởi động app: các kho/service gọi `loadFromFile()` để nạp trạng thái từ JSON; nếu thiếu file, seed dữ liệu mặc định và lưu lần đầu.

5. Ưu điểm
----------
- Tách biệt rõ Presentation/Business/Data giúp code dễ bảo trì, kiểm thử, mở rộng.
- Hoạt động offline, khởi động nhanh, khôi phục trạng thái ổn định giữa các phiên.
- Dữ liệu có cấu trúc, tuần tự hóa rõ ràng, dễ di trú sang backend về sau.

6. Hạn chế và hướng phát triển
------------------------------
- Chỉ lưu trữ cục bộ: không đồng bộ đa thiết bị, không realtime, rủi ro mất dữ liệu khi gỡ app.
- Chưa có cơ chế giao dịch/khóa ghi; cần chú ý khi thao tác song song.
- Đề xuất mở rộng:
  - Tích hợp backend (REST/Firebase) với đồng bộ hai chiều và xác thực bảo mật hơn.
  - Mã hóa dữ liệu nhạy cảm (thông tin người dùng), bổ sung logging có cấu trúc.
  - Thêm unit/integration test cho (de)serialization, luồng tạo đơn, tính tổng giỏ hàng.
  - Bổ sung chỉ mục/tìm kiếm nâng cao cho sản phẩm, cơ chế di trú dữ liệu (migration).
Ảnh:
database/img/image_helper.dart helper hiển thị ảnh từ asset hoặc file local, có errorBuilder